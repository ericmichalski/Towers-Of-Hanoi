#   Program created by Eric Michalski and Grace Owens
#   Copyright 2019, All Rights Reserved

#include <iostream>
#include <vector>

using namespace std;

template <class T>
class Queues{
public:
    int front, rear;
    vector<T> queue;
    Queues(){front = 0; rear = 0;}
    void enqueue(T l){
         queue.push_back(l);
         rear+=1;
        }

    T dequeue(){
        T returnval;
        if(front == rear){
            cout << endl << "Empty!" << endl;
        }
        else{
            returnval = queue[front];
            for (int i = 0; i <rear-1;i++){
                queue[i] = queue[i+1];
            }

        } rear-=1;
        return returnval;
    }
    void printQueue(){
        if (front ==rear){
            cout << endl << "Empty!" << endl;
        }
        else{
            for (int i=0; i < rear; i++){
                cout << queue[i]<< endl;
            }
        }
    }
};

template<class T>
class Stack {

private:
    int SIZE;
public:
    T** tower;
    int top;
    template<class T1>
    friend void displayTower(Stack<T1> s);
    template<class T2>
    friend bool check(Stack<T2> t, int num);
    Stack<T>(int size) {
        SIZE = size;
        tower = new T * [size];
        top = -1;
    }

    void push(T* val) {
        if (top == SIZE - 1) {
            throw Over();
        }
        else{
            top += 1;
            tower[top] = val;
        }
    }

    T* pop() {
        if (top == -1)
        {
            throw Under();
        }
        else{
            T* val = tower[top];
            int zero = 0;
            tower[top] = &zero;
            top -= 1;
            return val;
        }
    }

    T topOf() { return *tower[top]; }

    int length() { return top + 1; }

    void empty() {
        for (int i = 0; i < SIZE; i++) {
            delete tower[i];
        }
    }
    class Over {};
    class Under {};
};

template<class T1>
void displayTower(Stack<T1> s) {
    for (int i = 0; i < s.SIZE; i++) {
        cout << *s.tower[i] << " ";
    }
    cout << endl;
}
int main()
{
    int numDisks;
    int movefrom;
    int moveto;
    bool win = 0;
    Queues<string> moves;
    string move="";

    bool check(Stack<int> t, int num);
    cout << "How many disks would you like?\n";
    cin >> numDisks;
    cout << "You have " << numDisks << " disks at tower 1. Move\n"
            "them to either the middle or third tower." << endl;
    Stack<int> first(numDisks);
    Stack<int> two(numDisks);
    Stack<int> third(numDisks);

    int arr[numDisks];
    int zeroarray[numDisks];
    for (int i = 0; i < numDisks; i++) {
        zeroarray[i] = 0;
    }
    for (int i = 0; i < numDisks; i++) {
        arr[i] = numDisks - i;
    }
    for (int i = 0; i < numDisks; i++) {

        first.push(&arr[i]);
    }
    for (int i = 0; i < numDisks; i++) {

        two.push(&zeroarray[i]);
    }
    for (int i = 0; i < numDisks; i++) {

        third.push(&zeroarray[i]);
    }

    cout << endl << "Towers in order from 1 to 3" << endl << endl;
    cout << "Tower 1: " << endl;
    displayTower(first);
    cout << "Tower 2: " << endl;
    displayTower(two);
    cout << "Tower 3: " << endl;
    displayTower(third);

    // Variables used for checking disk sizes
    two.top = -1;
    third.top = -1;
    int x = 0;  // Tower 1
    int y = 0;  // Tower 2
    int z = 0;  // Tower 3

    while (!win){

        cout << "Which tower would you like to move from? Enter 1, 2, or 3\n";
        cin >> movefrom;
        cout << "Which tower would you like to move to? Enter 1, 2, or 3\n";
        cin >> moveto;

        if(movefrom==1 && moveto == 2){
           if (two.top == -1)
           {
               try{
                   int*  val = first.pop();
                   two.push(val);
                   move = "Moved disk from Tower 1 to 2.\n";
                   moves.enqueue(move);
               }
               catch(Stack<int>::Over){cout << "Tower 2 is full\n";}
               catch(Stack<int>::Under){cout<< "Tower 1 is empty\n";}
           }
           else if (two.top != -1){
               x = *first.tower[first.top];
               y = *two.tower[two.top];
               if (x <= y || y == 0)     // If the disk size moving from is smaller than or the same as the one it will be placed on
               {
                   try{
                   int*  val = first.pop();
                   two.push(val);
                   move = "Moved disk from Tower 1 to 2.\n";
                   moves.enqueue(move);
               }
                   catch(Stack<int>::Over){cout << "Tower 2 is full\n";}
                   catch(Stack<int>::Under){cout<< "Tower 1 is empty\n";}
               }
               else
               {
                   cout << "\n Error: Disk is too large \n\n";
               }
           }
       }
        if(movefrom==1 && moveto == 3){
            if (third.top == -1)
            {
                try{
                    int * val = first.pop();
                    third.push(val);
                    move = "Moved disk from Tower 1 to 3.\n";
                    moves.enqueue(move);
                }
                catch(Stack<int>::Over){cout << "Tower 3 is full\n";}
                catch(Stack<int>::Under){cout<< "Tower 1 is empty\n";}
            }
            else if (third.top != -1){
                x = *first.tower[first.top];
                z = *third.tower[third.top];
                if (x <= z || z == 0)     // If the disk size moving from  is smaller than or the same as the one it will be placed on
                {
                    try{
                        int * val = first.pop();
                        third.push(val);
                        move = "Moved disk from Tower 1 to 3.\n";
                        moves.enqueue(move);
                    }
                    catch(Stack<int>::Over){cout << "Tower 3 is full\n";}
                    catch(Stack<int>::Under){cout<< "Tower 1 is empty\n";}
                }
                else
                {
                    cout << "\n Error: Disk is too large \n\n";
                }
            }
        }

        if(movefrom==2 && moveto == 1){
            if (first.top == -1)
            {
                try{
                    int * val = two.pop();
                    first.push(val);
                    move = "Moved disk from Tower 2 to 1.\n";
                    moves.enqueue(move);
                }
                catch(Stack<int>::Over){cout << "Tower 1 is full\n";}
                catch(Stack<int>::Under){cout<< "Tower 2 is empty\n";}
            }
            else if (first.top != -1){
                x = *first.tower[first.top];
                y = *two.tower[two.top];
                if (y <= x || x == 0)     // If the disk size moving from is smaller than or the same as the one it will be placed on
                {
                    try{
                        int * val = two.pop();
                        first.push(val);
                        move = "Moved disk from Tower 2 to 1.\n";
                        moves.enqueue(move);
                    }
                    catch(Stack<int>::Over){cout << "Tower 1 is full\n";}
                    catch(Stack<int>::Under){cout<< "Tower 2 is empty\n";}
                }
                else
                {
                    cout << "\n Error: Disk is too large \n\n";
                }
            }
        }
        if(movefrom==2 && moveto == 3){
            if (third.top == -1){
                try{
                    int * val = two.pop();
                    third.push(val);
                    move = "Moved disk from Tower 2 to 3.\n";
                    moves.enqueue(move);
                }
                catch(Stack<int>::Over){cout << "Tower 3 is full\n";}
                catch(Stack<int>::Under){cout<< "Tower 2 is empty\n";}
            }
            else if (third.top != -1){
                z = *third.tower[third.top];
                y = *two.tower[two.top];
                if (y <= z || z == 0)     // If the disk size moving from is smaller than or the same as the one it will be placed on
                {
                    try{
                        int * val = two.pop();
                        third.push(val);
                        move = "Moved disk from Tower 2 to 3.\n";
                        moves.enqueue(move);
                    }
                    catch(Stack<int>::Over){cout << "Tower 3 is full\n";}
                    catch(Stack<int>::Under){cout<< "Tower 2 is empty\n";}
                }
                else
                {
                    cout << "\n Error: Disk is too large \n\n";
                }
            }
        }

        if(movefrom==3 && moveto == 1){
            if (first.top == -1){
                try{
                    int *val = third.pop();
                    first.push(val);
                    move = "Moved disk from Tower 3 to 1.\n";
                    moves.enqueue(move);
                }
                catch(Stack<int>::Over){cout << "Tower 1 is full\n";}
                catch(Stack<int>::Under){cout<< "Tower 3 is empty\n";}
            }
            else if (first.top != -1){
                x = *first.tower[first.top];
                z = *third.tower[third.top];
                if (z <= x || x == 0)     // If the disk size moving from is smaller than or the same as the one it will be placed on
                {
                    try{
                        int *val = third.pop();
                        first.push(val);
                        move = "Moved disk from Tower 3 to 1.\n";
                        moves.enqueue(move);
                    }
                    catch(Stack<int>::Over){cout << "Tower 1 is full\n";}
                    catch(Stack<int>::Under){cout<< "Tower 3 is empty\n";}
                }
                else
                {
                    cout << "\n Error: Disk is too large \n\n";
                }
            }
        }
        if(movefrom==3 && moveto == 2){
            if (two.top == -1)
            {
                try{
                    int * val = third.pop();
                    two.push(val);
                    move = "Moved disk from Tower 3 to 2.\n";
                    moves.enqueue(move);
                }
                catch(Stack<int>::Over){cout << "Tower 2 is full\n";}
                catch(Stack<int>::Under){cout<< "Tower 3 is empty\n";}
            }
            else if (two.top != -1){
                z = *third.tower[third.top];
                y = *two.tower[two.top];
                if (z <= y || y == 0)     // If the disk size moving from is smaller than or the same as the one it will be placed on
                {
                    try{
                        int * val = third.pop();
                        two.push(val);
                        move = "Moved disk from Tower 3 to 2.\n";
                        moves.enqueue(move);
                    }
                    catch(Stack<int>::Over){cout << "Tower 2 is full\n";}
                    catch(Stack<int>::Under){cout<< "Tower 3 is empty\n";}
                }
                else
                {
                    cout << "\n Error: Disk is too large \n\n";
                }
            }
        }

        cout << "Tower 1: " << endl;
        displayTower(first);
        cout << "Tower 2: " << endl;
        displayTower(two);
        cout << "Tower 3: " << endl;
        displayTower(third);

        bool win2 = 0, win3 = 0;
        win2 = check(two, numDisks);
        win3 = check(third, numDisks);
        if(win2 || win3){win=1; cout << "Player 1 won!\n";}
    }
    cout << "\nNow printing all of the game moves:\n\n";
    moves.printQueue();

return 0;
}


bool check(Stack<int> t, int num) {
    int checkval = num;
    for (int i = 0; i < num; i++) {
        if (*t.tower[i] != checkval) {
            return 0;
        }
        checkval -= 1;
    }
    return 1;
}
